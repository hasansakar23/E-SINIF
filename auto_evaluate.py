import os
import json
import tempfile
from fastapi import UploadFile
from PyPDF2 import PdfReader
from dotenv import load_dotenv
import google.generativeai as genai

# .env dosyasÄ±nÄ± yÃ¼kle
load_dotenv()

# Gemini API'yi yapÄ±landÄ±r
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
model = genai.GenerativeModel("gemini-pro")

# PDF dosyasÄ±ndan metin Ã§Ä±karan yardÄ±mcÄ± fonksiyon
def extract_text_from_pdf(file: UploadFile) -> str:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        tmp.write(file.file.read())
        tmp_path = tmp.name

    reader = PdfReader(tmp_path)
    text = "\n".join(page.extract_text() for page in reader.pages if page.extract_text())
    return text

# Gemini ile deÄŸerlendirme yapan ana fonksiyon
def evaluate_homework_with_gemini(text: str) -> dict:
    prompt = f"""
AÅŸaÄŸÄ±daki Ã¶devi aÅŸaÄŸÄ±daki 5 kritere gÃ¶re deÄŸerlendir:

1. AnlatÄ±m BÃ¼tÃ¼nlÃ¼ÄŸÃ¼ (coherence)
2. Kaynak KullanÄ±mÄ± (sources)
3. Yorum GÃ¼cÃ¼ (reasoning)
4. Dil ve AnlatÄ±m (language)
5. Genel Geri Bildirim (feedback)

Her Ã¶lÃ§Ã¼t iÃ§in % puan ver ve son olarak bir toplam puan (total_score) hesapla.

LÃ¼tfen cevabÄ± yalnÄ±zca ÅŸu JSON formatÄ±nda ver:

{{
  "coherence": int,
  "sources": int,
  "reasoning": int,
  "language": int,
  "feedback": "metinsel yorum",
  "total_score": int
}}

Ã–DEV METNÄ°:
\"\"\"
{text}
\"\"\"
"""

    # Gemini'ye isteÄŸi gÃ¶nder
    response = model.generate_content(prompt)

    # Geri dÃ¶nen cevabÄ± terminalde gÃ¶ster (debug iÃ§in)
    print("ğŸ’¬ Gemini'den gelen yanÄ±t:")
    print(response.text)

    # JSON parse etmeyi dene
    try:
        result = json.loads(response.text)
        return result
    except Exception as e:
        return {
            "error": str(e),
            "raw": response.text
        }
